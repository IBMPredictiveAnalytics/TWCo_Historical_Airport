# **********************************Header*************************************
# *********GENERAL*********
# OBJECT NAME: TWCoHistoricalAirport 
# VERSION: 2.24
# OBJECT TYPE: R Custom Node
# CATEGORY: Utility
# SUBCATEGORY: Weather
# CREATED BY:   YU WENPEI	
# DATE:         11/15/2016
# MODIFIED BY:  GRANT CASE
# DATE:         01/07/2017
# DESCRIPTION:
# C:\Users\IBM_ADMIN\Box Sync\My Work Folder\IBM SPSS Predictive Extensions\TWCo_Historical_Airport\
# 
# 
# 
# 
# *********VARIABLES*********
# NAME	      		TYPE		LOCAL/PASSED	DEFAULT	
# DESCRIPTION		
# ---------------------------------------------------------------
#
# 
# 
# *********DEPENDENCIES*********
# PACKAGES:
# httr
# plyr
# 
# 
# 
# *********OUTPUT*********
# 
# 
# *********MODIFICATION LOG*********
# DATE        INITIALS MODIFICATION
# 11/15/2016  YW
# Created  
# 01/07/2017  GSC      
# Updated to ensure correct results by aligning measures datatypes also
# add comments, sections, and headers for easier understanding
# 
# *********HEADER CONVENTIONS*********
# DO NOT GO PAST 80 CHARACTERS
# TO DEBUG, REPLACE ALL "# DEBUG "
# TO TURN DEBUG OFF, FIND ALL LINES WITH "  # DB" AND "# DEBUG" AT BEGINNING
# **********************************Header*************************************

# -----------------------------------------------------------------------------
# -- PACKAGE DECLARATION SECTION
# -----------------------------------------------------------------------------
# ********************Create test for package existence************************
packages <- function(x) {
  x <- as.character(match.call()[[2]])
  if (!require(x, character.only=TRUE)) {
    install.packages(pkgs=x, repos="http://cran.r-project.org")
    require(x, character.only=TRUE)
  }
}

# ****************************Packages to Use**********************************
packages(httr)
packages(plyr)
# DEBUG print("install package")


# -----------------------------------------------------------------------------
# -- CUSTOM DIALOG VARIABLE DECLARATION SECTION
# -----------------------------------------------------------------------------
input_apikey         <- "%%item_apikey%%"
input_requestType    <- %%item_locationtype%%  # requestType has two value c("geocode","stationId", "postalCode")
input_latitude       <- "%%item_lat%%"
input_longitude      <- "%%item_lon%%"
input_postalCode     <- "%%item_postalcode%%"
input_startDate      <- "%%item_startdate%%"
input_endDate        <- "%%item_enddate%%" 


input_units          <- "%%item_unit%%"
# e = English units
# m = Metric units
# h = Hybrid units (UK)
# s = Metric SI units (not available for all APIs)


input_date_inputtype <- %%item_date_group%%
input_startDate_text <- "%%item_startdate_input%%"
input_endDate_text   <- "%%item_enddate_input%%"



# -----------------------------------------------------------------------------
# -- CONSTANT SET SECTION
# -----------------------------------------------------------------------------
sBaseUrl <- "https://api.weather.com/v1/"
sHistoricalUrl <- "/observations/historical.json?language=en-US"

# DEBUG print("Start modelerData")  # DB
# DEBUG modelerData  # DB
# DEBUG print("End modelerData")  # DB

# -----------------------------------------------------------------------------
# -- FUNCTION DEFINITION SECTION
# -----------------------------------------------------------------------------


retrieveDataFromTWC_OneMonth <- function(url) {
  resultContext <- content(GET(url))

  processOneRecord <- function(observations){
    return(lapply(observations,processEachCell))
  }
  
  processEachCell <- function(cell){
    if(is.null(cell)) return(NA)
    else return(cell)
  }

  if(is.null(resultContext$observations)) {
    print(toString(resultContext))
  }  

  resultData <- ldply (lapply(resultContext$observations,processOneRecord), data.frame)

  if(input_requestType == "postalCode") {
    return(data.frame(latitude=resultContext$metadata$location_id,
                      resultData))
  } else {
    return(data.frame(latitude=resultContext$metadata$latitude, 
                      longitude=resultContext$metadata$longitude,
                      resultData))
  }
}


retrieveDataFromTWC <- function(modelerDataRecord) {
  generateUrl <- function(sLocationUrl, sDateRange) {
    sUrl <- paste(sBaseUrl, 
                  sLocationUrl, 
                  sHistoricalUrl,
                  "&units=", input_units,
                  "&apiKey=", input_apikey,
                  sDateRange,
                  sep="")
    return(sUrl)
  }
  
  sLatURL <- as.character(modelerDataRecord[input_latitude])
  sLongURL <- as.character(modelerDataRecord[input_longitude])

# DEBUG   print(sLatURL)  # DB
# DEBUG   print(sLongURL)  # DB
  
  if (input_requestType == "geocode") {
    sLocationUrl = paste("geocode/", 
                         sLatURL, "/", 
                         sLongURL, 
                         sep="")
  } else if (input_requestType == "postalCode") {
    sLocationUrl = paste("location/", 
                         modelerDataRecord[input_postalCode], sep="")
  }
  
  if (input_date_inputtype == "is_variable") {
    sInputStartDate <- modelerDataRecord[input_startDate]
    if (input_endDate == "") {
      sInputEndDate <- modelerDataRecord[input_startDate]
    } else {
      sInputEndDate <- modelerDataRecord[input_endDate]
    }
  } else {
    sInputStartDate <- input_startDate_text
    if (input_endDate_text == "") {
      sInputEndDate <- input_startDate_text
    } else {
      sInputEndDate <- input_endDate_text
    }
  }
# DEBUG   print(sInputStartDate)  # DB
# DEBUG   print(sInputEndDate)  # DB
 sStartDate <- as.Date(sInputStartDate, "%Y%m%d")
 sEndDate <- as.Date(sInputEndDate, "%Y%m%d")

# DEBUG  print(sStartDate)  # DB
# DEBUG  print(sEndDate)  # DB

 resultData <- data.frame()
 for(day in format(seq(sStartDate,sEndDate,30), "%Y%m%d")) {
   dayNumber <- as.Date(day, "%Y%m%d")
   sMonthStartDate <- day#format(day, "%Y%m%d")
   if (dayNumber + 30 > sEndDate )
     sMonthEndDate <- format(sEndDate, "%Y%m%d")
   else
     sMonthEndDate <- format(dayNumber + 30, "%Y%m%d")
   sDateRange = paste("&startDate=", 
                      sMonthStartDate, "&endDate=", 
                      sMonthEndDate, sep="")
   sRequestURL <- generateUrl(sLocationUrl, sDateRange)
# DEBUG     print(sRequestURL)  # DB
   resultData <- rbind(resultData, retrieveDataFromTWC_OneMonth(sRequestURL))
# DEBUG   print(nrow(resultData)) # DB
 }
# DEBUG  print(nrow(resultData))  # DB
 return(data.frame(resultData))
}

# -----------------------------------------------------------------------------
# -- modelerData SECTION
# -----------------------------------------------------------------------------
# Retrieve each row from modelerData, run the retrieveDataFromTWC, and 
# return the data frame 
modelerData <- ldply(apply(modelerData, 1, FUN = retrieveDataFromTWC))

# DEBUG print("modelerDataComplete")  # DB
# DEBUG head(modelerData, n=10)  # DB

# -----------------------------------------------------------------------------
# -- modelerDataModel UPDATE SECTION
# -----------------------------------------------------------------------------
valLatitude                  <- c(fieldName="latitude", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valLongitude                 <- c(fieldName="longitude", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valLocationId                <- c(fieldName="locationId", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="", fieldRole="")
valKey                       <- c(fieldName="key", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valClass                     <- c(fieldName="class", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valExpire_time_gmt           <- c(fieldName="expire_time_gmt", fieldLabel="", fieldStorage="timestamp", fieldMeasure="", fieldFormat="",   fieldRole="")
valObs_id                    <- c(fieldName="obs_id", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valObs_name                  <- c(fieldName="obs_name", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valValid_time_gmt            <- c(fieldName="valid_time_gmt", fieldLabel="", fieldStorage="timestamp", fieldMeasure="", fieldFormat="",   fieldRole="")
valDay_ind                   <- c(fieldName="day_ind", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valTemp                      <- c(fieldName="temp", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valWx_icon                   <- c(fieldName="wx_icon", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valIcon_extd                 <- c(fieldName="icon_extd", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valWx_phrase                 <- c(fieldName="wx_phrase", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valPressure_tend             <- c(fieldName="pressure_tend", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valPressure_desc             <- c(fieldName="pressure_desc", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valDewPt                     <- c(fieldName="dewPt", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valHeat_index                <- c(fieldName="heat_index", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valRh                        <- c(fieldName="rh", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valPressure                  <- c(fieldName="pressure", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valVis                       <- c(fieldName="vis", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valWc                        <- c(fieldName="wc", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valWdir                      <- c(fieldName="wdir", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valWdir_cardinal             <- c(fieldName="wdir_cardinal", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valGust                      <- c(fieldName="gust", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valWspd                      <- c(fieldName="wspd", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valMax_temp                  <- c(fieldName="max_temp", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valMin_temp                  <- c(fieldName="min_temp", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valPrecip_total              <- c(fieldName="precip_total", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valPrecip_hrly               <- c(fieldName="precip_hrly", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valSnow_hrly                 <- c(fieldName="snow_hrly", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valUv_desc                   <- c(fieldName="uv_desc", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valFeels_like                <- c(fieldName="feels_like", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valUv_index                  <- c(fieldName="uv_index", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="",   fieldRole="")
valQualifier                 <- c(fieldName="qualifier", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valQualifier_svrty           <- c(fieldName="qualifier_svrty", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valBlunt_phrase              <- c(fieldName="blunt_phrase", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valTerse_phrase              <- c(fieldName="terse_phrase", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="",   fieldRole="")
valClds                      <- c(fieldName="clds", fieldLabel="", fieldStorage="string", fieldMeasure="", fieldFormat="", fieldRole="")
valWater_temp                <- c(fieldName="water_temp", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valPrimary_wave_period       <- c(fieldName="primary_wave_period", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valPrimary_wave_height       <- c(fieldName="primary_wave_height", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valPrimary_swell_period      <- c(fieldName="primary_swell_period", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valPrimary_swell_height      <- c(fieldName="primary_swell_height", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valPrimary_swell_direction   <- c(fieldName="primary_swell_direction", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valSecondary_swell_period    <- c(fieldName="secondary_swell_period", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valSecondary_swell_height    <- c(fieldName="secondary_swell_height", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")
valSecondary_swell_direction <- c(fieldName="secondary_swell_direction", fieldLabel="", fieldStorage="real", fieldMeasure="", fieldFormat="", fieldRole="")

modelerDataModel <- data.frame(valKey, valClass, valExpire_time_gmt, valObs_id, valObs_name, 
                               valValid_time_gmt, valDay_ind, valTemp, valWx_icon, valIcon_extd, 
                               valWx_phrase, valPressure_tend, valPressure_desc, valDewPt, valHeat_index, 
                               valRh, valPressure, valVis, valWc, valWdir, valWdir_cardinal, valGust, 
                               valWspd, valMax_temp, valMin_temp, valPrecip_total, valPrecip_hrly, 
                               valSnow_hrly, valUv_desc, valFeels_like, valUv_index, valQualifier, 
                               valQualifier_svrty, valBlunt_phrase, valTerse_phrase, valClds, 
                               valWater_temp, valPrimary_wave_period, valPrimary_wave_height, 
                               valPrimary_swell_period, valPrimary_swell_height, valPrimary_swell_direction, 
                               valSecondary_swell_period, valSecondary_swell_height, valSecondary_swell_direction)

if (input_requestType == "postalCode") {
  modelerDataModel <- data.frame(valLocationId, modelerDataModel)
} else {
  modelerDataModel <- data.frame(valLatitude, valLongitude, modelerDataModel)
}

# DEBUG print("modelerDataModel Complete")  # DB
# DEBUG modelerDataModel  # DB

# -----------------------------------------------------------------------------
# -- TESTING SECTION
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# -- CLEAN UP SECTION
# -----------------------------------------------------------------------------



















